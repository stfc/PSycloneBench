program gocean2d
  use dl_timer
  use grid_mod
  use field_mod
  use initialisation_mod, only : initialisation
  use otter_serial
  use model_mod
  use gocean2d_io_mod, only : model_write
  use gocean_mod, only : gocean_finalise, gocean_initialise, model_write_log
  TYPE(grid_type), TARGET :: model_grid
  TYPE(r2d_field), TARGET :: sshn_u_fld
  TYPE(r2d_field), TARGET :: sshn_v_fld
  TYPE(r2d_field), TARGET :: sshn_t_fld
  TYPE(r2d_field), TARGET :: ssha_u_fld
  TYPE(r2d_field), TARGET :: ssha_v_fld
  TYPE(r2d_field), TARGET :: ssha_t_fld
  TYPE(r2d_field), TARGET :: ht_fld
  TYPE(r2d_field), TARGET :: hu_fld
  TYPE(r2d_field), TARGET :: hv_fld
  TYPE(r2d_field), TARGET :: un_fld
  TYPE(r2d_field), TARGET :: vn_fld
  TYPE(r2d_field), TARGET :: ua_fld
  TYPE(r2d_field), TARGET :: va_fld
  integer :: istp
  integer :: itimer0
  integer(kind=i_def64) :: nrepeat

  call gocean_initialise()
  model_grid = grid_type(GO_ARAKAWA_C,(/GO_BC_EXTERNAL, GO_BC_EXTERNAL, GO_BC_NONE/),GO_OFFSET_NE)
  call model_init(model_grid)
  sshn_u_fld = r2d_field(model_grid,GO_U_POINTS)
  sshn_v_fld = r2d_field(model_grid,GO_V_POINTS)
  sshn_t_fld = r2d_field(model_grid,GO_T_POINTS)
  ssha_u_fld = r2d_field(model_grid,GO_U_POINTS)
  ssha_v_fld = r2d_field(model_grid,GO_V_POINTS)
  ssha_t_fld = r2d_field(model_grid,GO_T_POINTS)
  hu_fld = r2d_field(model_grid,GO_U_POINTS)
  hv_fld = r2d_field(model_grid,GO_V_POINTS)
  ht_fld = r2d_field(model_grid,GO_T_POINTS)
  un_fld = r2d_field(model_grid,GO_U_POINTS)
  vn_fld = r2d_field(model_grid,GO_V_POINTS)
  ua_fld = r2d_field(model_grid,GO_U_POINTS)
  va_fld = r2d_field(model_grid,GO_V_POINTS)
  call initialisation(ht_fld, hu_fld, hv_fld, sshn_u_fld, sshn_v_fld, sshn_t_fld, un_fld, vn_fld)
  call model_write(model_grid, 0, ht_fld, sshn_t_fld, un_fld, vn_fld)
  nrepeat = nitend - nit000 + 1
  call model_write_log('((A))', '=== Start Time-stepping ===')
  call fortran_otterTraceInitialise_i(__FILE__, 'main', __LINE__)
  call timer_start(itimer0, label='Time-stepping', num_repeats=nrepeat)
  do istp = nit000, nitend, 1
    call step(istp, ua_fld, va_fld, un_fld, vn_fld, sshn_t_fld, sshn_u_fld, sshn_v_fld, ssha_t_fld, ssha_u_fld, ssha_v_fld, &
&hu_fld, hv_fld, ht_fld)
    call model_write(model_grid, istp, ht_fld, sshn_t_fld, un_fld, vn_fld)
  enddo
  call timer_stop(itimer0)
  call fortran_otterTraceFinalise
  call model_write_log('((A))', '=== Time-stepping finished ===')
  call model_write_log("('ua checksum = ',E16.8)", field_checksum(ua_fld))
  call model_write_log("('va checksum = ',E16.8)", field_checksum(va_fld))
  call model_finalise()
  call model_write_log('((A))', 'Simulation finished!!')
  call gocean_finalise()

end program gocean2d
subroutine step(istp, ua, va, un, vn, sshn_t, sshn_u, sshn_v, ssha_t, ssha_u, ssha_v, hu, hv, ht)
  use kind_params_mod
  use grid_mod
  use field_mod
  use gocean2d_io_mod, only : model_write
  use continuity_mod, only : continuity
  use momentum_mod, only : momentum_u, momentum_v
  use boundary_conditions_mod, only : bc_flather_u, bc_flather_v, bc_solid_u, bc_solid_v, bc_ssh
  use time_update_mod, only : next_sshu, next_sshv
  use infrastructure_mod, only : copy
  use psy_gocean2d, only : invoke_0
  integer, intent(inout) :: istp
  type(r2d_field), intent(inout) :: un
  type(r2d_field), intent(inout) :: vn
  type(r2d_field), intent(inout) :: sshn_t
  type(r2d_field), intent(inout) :: sshn_u
  type(r2d_field), intent(inout) :: sshn_v
  type(r2d_field), intent(inout) :: ua
  type(r2d_field), intent(inout) :: va
  type(r2d_field), intent(inout) :: ssha_t
  type(r2d_field), intent(inout) :: ssha_u
  type(r2d_field), intent(inout) :: ssha_v
  type(r2d_field), intent(inout) :: hu
  type(r2d_field), intent(inout) :: hv
  type(r2d_field), intent(inout) :: ht

  call invoke_0(ssha_t, sshn_t, sshn_u, sshn_v, hu, hv, un, vn, ua, ht, ssha_u, va, ssha_v, istp)

end subroutine step
