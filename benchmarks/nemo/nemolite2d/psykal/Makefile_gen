# Makefile to compile and link the PSyclone generated code.
# To make permanant changes in this Makefile, modify the 'Makefile_gen'
# file in the psykal root directory.

# Location of the infrastructure libraries
SHARED_DIR = ../../../../../shared
TIMER_DIR = ${SHARED_DIR}/dl_timer
TIMER_INC = ${TIMER_DIR}/src
TIMER_LIB = ${TIMER_DIR}/dl_timer_lib.a
INF_DIR = ${SHARED_DIR}/dl_esm_inf/finite_difference
INF_INC = ${INF_DIR}/src
FORTCL_INC = ${SHARED_DIR}/FortCL/src/
FORTCL_LIB = ${SHARED_DIR}/FortCL/src/libFortCL.a
COMMON_DIR = ../../common
COMMON_LIB = ${COMMON_DIR}/nemolite2d_common.a

# It uses its own copy of INF_LIB
INF_LIB=lib_fd.a

# The kernels used by this application and their location
KERNEL_DIR = ../kernels/fortran
KERNELS = boundary_conditions_mod.o \
          continuity_mod.o \
          momentum_mod.o \
          time_update_mod.o \
		  infrastructure_mod.o


PLATFORM = xilinx_u200_xdma_201830_2
EXECUTION_TARGET = sw_emu # Options: sw_emu | hw_emu | hw

.PHONY: nemolite2d nemolite2docl nemolite2dxilinx

all: nemolite2d
.DEFAULT_GOAL := nemolite2d

# Build NemoLite2D
nemolite2d: ${KERNELS} psy.o alg.o
	$(F90) $(F90FLAGS) -o $@.exe  ${KERNELS} psy.o alg.o ${COMMON_LIB} \
		${TIMER_LIB} ${INF_LIB} $(LDFLAGS) ${OMPFLAGS}


# Build NemoLite2D for OpenCL (with JIT'ed kernels)
nemolite2docl: ${KERNELS} psy.o alg.o
	$(F90) $(F90FLAGS) -o $@.exe  ${KERNELS} psy.o alg.o ${COMMON_LIB} \
		${TIMER_LIB} ${INF_LIB} $(LDFLAGS) ${OMPFLAGS} ${FORTCL_LIB} -lOpenCL


# Build NemoLite2D for OpenCL with Xilinx SDK pre-compiled kernels
nemolite2dxilinx: ${KERNELS} allkernels.xclbin psy.o alg.o
	$(F90) $(F90FLAGS) -o $@.exe ${KERNELS} psy.o alg.o ${COMMON_LIB} \
		${TIMER_LIB} ${INF_LIB} $(LDFLAGS) ${OMPFLAGS} -lOpenCL


# Generic rules
%.o: %.f90
	$(F90) $(F90FLAGS) -I${COMMON_DIR} -I${INF_INC} -I${TIMER_INC} \
		-I${FORTCL_INC} -c $<

%.o: %.F90
	$(F90) $(F90FLAGS) -I${COMMON_DIR} -I${INF_INC} -I${TIMER_INC} -c $<

%.o: %.mod

# Xilinx Vitis OpenCL kernel compilation
%.xclbin: %.cl
	# Compile to a .xo file
	v++ --compile --platform ${PLATFORM} --target ${EXECUTION_TARGET} \
		$< -o $<.xo
	# Link to create a Xilinx FPGA bianry container (.xclbin)
	v++ --link --platform ${PLATFORM} --target ${EXECUTION_TARGET} \
		${PROFILING_FLAGS} $<.xo -o $@

# If we need a .f90 file that doesn't exist then it must be a kernel.
# Create a link to the required file...
%.f90:
	ln -sf ../../kernels/fortran/$@ .

clean:
	rm -f *.o *.mod *_opt_report.txt


# Execution helpers
run_xilinx_sw_emu:
	FORTCL_KERNELS_FILE=allkernels.xclbin XCL_EMULATION_MODE=sw_emu ./nemolite2dxilinx.exe

run_xilinx_hw_emu:
	FORTCL_KERNELS_FILE=allkernels.xclbin XCL_EMULATION_MODE=hw_emu ./nemolite2dxilinx.exe
