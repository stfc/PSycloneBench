package gocean;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

class ComputeVnew extends Kernel {

	private static final DFEType type = dfeFloat(11,53);

	protected ComputeVnew(KernelParameters parameters) {
		super(parameters);

		int width = 256;
		// \todo Set these quantities from the CPU
		double tdts8 = 0.5;
        double tdtsdx = 0.5;

		DFEVar vold = io.input("vold", type);
		DFEVar z = io.input("z", type);
		DFEVar cu = io.input("cu", type);
		DFEVar h = io.input("h", type);

		CounterChain chain = control.count.makeCounterChain();
		DFEVar j = chain.addCounter(width*width, 1);

//	    tdts8 = tdt/8.0d0
//	    tdtsdy = tdt/dy

//	    VNEW(I,J) = VOLD(I,J)- &
//	                TDTS8*(Z(I+1,J+1)+Z(I,J+1)) &
//	                *(CU(I,J+1)+CU(I-1,J+1)+CU(I-1,J)+CU(I,J)) &
//	                 -TDTSDY*(H(I,J+1)-H(I,J))

		DFEVar aboveLowerBound = j > 0;
		DFEVar belowUpperBound = j < width*(width-1) - 1;
		DFEVar inBounds = aboveLowerBound & belowUpperBound;

//		DFEVar unew = z + cv + h;

        DFEVar vnew =  inBounds ? vold - tdts8*(stream.offset(z, width+1) + stream.offset(z,width))*
        		  (stream.offset(cu,width) + cu + stream.offset(cu, width-1) + stream.offset(cu, -1)) -
  		    tdtsdx*(stream.offset(h, width) - h) : 0.0;

		io.output("vnew", vnew, type);
	}

}