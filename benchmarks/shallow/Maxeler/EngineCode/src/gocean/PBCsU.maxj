package gocean;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

class PBCsU extends Kernel {

	// 64-bit floating point
	private static final DFEType type = dfeFloat(11,53);

	protected PBCsU(KernelParameters parameters) {
		super(parameters);

		int width = 256;
		DFEVar u = io.input("ufld", type);

		// Make a counter chain to count in same way as
		// for(j=0; j<width; j++){
		//   for(i=0; i<width; i++){
		CounterChain chain = control.count.makeCounterChain();
		DFEVar j = chain.addCounter(width, 1);
		DFEVar i = chain.addCounter(width, 1);

        // First col = last col
        //field(1,    1:N) = field(MP1,  1:N)
        // Last row = first row
        //field(1:MP1,NP1) = field(1:MP1,1)

        // First col = last col
        DFEVar utmp = i > 0 ? u : stream.offset(u,width);
        // Last row = first row
        // \TODO Correct these offsets to get correct values
        // \TODO More efficient to copy the first 'row' of the array
        // into FMEM and then read from that here?
        DFEVar uout = j > width-2 ? stream.offset(u, -(width-1)*width) : utmp;

		// For debugging purposes, simply copy input to output for the moment
        //DFEVar uout = u;

		io.output("ufldout", uout, type);
	}

}
