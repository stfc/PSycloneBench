package gocean;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

class ComputeUnew extends Kernel {

	private static final DFEType type = dfeFloat(11,53);

	protected ComputeUnew(KernelParameters parameters) {
		super(parameters);

		int width = 256;
		// \todo Set these quantities from the CPU
		double tdts8 = 0.5;
        double tdtsdx = 0.5;

		DFEVar uold = io.input("uold", type);
		DFEVar z = io.input("z", type);
		DFEVar cv = io.input("cv", type);
		DFEVar h = io.input("h", type);

		CounterChain chain = control.count.makeCounterChain();
		DFEVar j = chain.addCounter(width*width, 1);

//		UNEW(I,J) = UOLD(I,J) +
//         TDTS8*(Z(I+1,J+1) + Z(I+1,J)) *
//         (CV(I+1,J)+CV(I,J)+CV(I,J-1)+CV(I+1,J-1)) -
//         TDTSDX*(H(I+1,J)-H(I,J))
//		ipt = (J-1)*M + I
//      unew[ipt] = uold[ipt] + tdts8*(z[ipt + M + 1]+ z[ipt+1])*
//		   (cv[ipt+1]+cv[ipt]+cv[ipt - M] + cv[ipt - M + 1]) -
//         tdtsdx*(h[ipt+1] - h[ipt]

//        DFEVar unew =  j < width ? 0.0 : uold +
//        		tdts8*(stream.offset(z, width+1) + stream.offset(z,1))*
//        		(stream.offset(cv,1)+cv+stream.offset(cv, -width)+stream.offset(cv, 1-width))
//        		- tdtsdx*(stream.offset(h, 1) - h);
		DFEVar aboveLowerBound = j > width;
		DFEVar belowUpperBound = j < width*(width-1);
		DFEVar inBounds = aboveLowerBound & belowUpperBound;

//		DFEVar unew = z + cv + h;

        DFEVar unew =  inBounds ? uold + tdts8*(stream.offset(z, width+1) + stream.offset(z,1))*
        		  (stream.offset(cv,1)+cv+stream.offset(cv, -width)+stream.offset(cv, 1-width)) -
  		    tdtsdx*(stream.offset(h, 1) - h) : 0.0;

		io.output("unew", unew, type);
	}

}