package gocean;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

class PBCsF extends Kernel {

	// 64-bit floating point
	private static final DFEType type = dfeFloat(11,53);

	protected PBCsF(KernelParameters parameters) {
		super(parameters);

		int width = 256;
		DFEVar ffld = io.input("ffld", type);

		// Make a counter chain to count in same way as
		// for(j=0; j<width; j++){
		//   for(i=0; i<width; i++){
		CounterChain chain = control.count.makeCounterChain();
		DFEVar j = chain.addCounter(width, 1);
		DFEVar i = chain.addCounter(width, 1);

	    // First col = last col
	    // field(1,    2:NP1) = field(MP1,  2:NP1)
	    // First row = last row
	    // field(1:MP1,1)     = field(1:MP1,NP1)

        // First col = last col
        DFEVar ftmp = i > 0 ? ffld : stream.offset(ffld,width);
        // First row = last row
        DFEVar ffldout = j > 0 ? ftmp : stream.offset(ftmp, (width-1)*width);

		io.output("ffldout", ffldout, type);
	}

}
