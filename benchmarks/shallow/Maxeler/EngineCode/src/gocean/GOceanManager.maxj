package gocean;

import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.Fanout;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControlGroup;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;

public class GOceanManager extends CustomManager {

	// Kernel names
	private static final String s_kernelName1 = "ComputeCU";
	private static final String s_kernelName2 = "ComputeCV";
	private static final String s_kernelName3 = "ComputeZ";
	private static final String s_kernelName4 = "ComputeH";
	private static final String s_kernelName5 = "ComputeUnew";
	private static final String s_kernelName6 = "ComputeVnew";
	private static final String s_kernelName7 = "ComputePnew";
    private static final String s_kernelName8 = "TimeSmoothU";
    private static final String s_kernelName9 = "TimeSmoothV";
    private static final String s_kernelName10 = "TimeSmoothP";
    private static final String s_kernelName11 = "BCsU";
    private static final String s_kernelName12 = "BCsV";
    private static final String s_kernelName13 = "BCsT";
    private static final String s_kernelName14 = "BCsF";


	// Routing block names
    private static final String s_pressureFanout = "PressureFan";
    private static final String s_uFanout = "uFan";
    private static final String s_vFanout = "vFan";
    private static final String s_cuFanout = "cuFan";
    private static final String s_cvFanout = "cvFan";
    private static final String s_zFanout = "zFan";
    private static final String s_hFanout = "hFan";
    private static final String s_uoldFanout = "uoldFan";
    private static final String s_voldFanout = "voldFan";
    private static final String s_poldFanout = "poldFan";
    private static final String s_unewFanout = "unewFan";
    private static final String s_vnewFanout = "vnewFan";
    private static final String s_pnewFanout = "pnewFan";

	public GOceanManager(GOceanEngineParameters engineParameters) {
		super(engineParameters);

		// Define an integer constant that will be available to the CPU code via a call to
		// run-time API
		addMaxFileConstant("DOMAIN_SIZE", 256);

		// Add the kernels to the manager
		KernelBlock compute_CU = addKernel(new ComputeCU(makeKernelParameters(s_kernelName1)));

		KernelBlock compute_CV = addKernel(new ComputeCV(makeKernelParameters(s_kernelName2)));

		KernelBlock compute_Z = addKernel(new ComputeZ(makeKernelParameters(s_kernelName3)));

		KernelBlock compute_H = addKernel(new ComputeH(makeKernelParameters(s_kernelName4)));

		KernelBlock compute_Unew = addKernel(new ComputeUnew(makeKernelParameters(s_kernelName5)));

		KernelBlock compute_Vnew = addKernel(new ComputeVnew(makeKernelParameters(s_kernelName6)));

		KernelBlock compute_Pnew = addKernel(new ComputePnew(makeKernelParameters(s_kernelName7)));

		KernelBlock timeSmoothU = addKernel(new TimeSmooth(makeKernelParameters(s_kernelName8)));

		KernelBlock timeSmoothV = addKernel(new TimeSmooth(makeKernelParameters(s_kernelName9)));

		KernelBlock timeSmoothP = addKernel(new TimeSmooth(makeKernelParameters(s_kernelName10)));

		//KernelBlock pbcs_u = addKernel(new PBCsU(makeKernelParameters(s_kernelName11)));
		//\BUG For testing use the PBCsU kernel for pbcs_v object
		//KernelBlock pbcs_v = addKernel(new PBCsU(makeKernelParameters(s_kernelName12)));
		//KernelBlock pbcs_v = addKernel(new PBCsV(makeKernelParameters(s_kernelName12)));
		//KernelBlock pbcs_t = addKernel(new PBCsT(makeKernelParameters(s_kernelName13)));
		//KernelBlock pbcs_f = addKernel(new PBCsF(makeKernelParameters(s_kernelName14)));

		// Streams for reading/writing LMEM from CPU
		DFELink cpu2lmem_u = addStreamToOnCardMemory("lmemuold_in",
				                      MemoryControlGroup.MemoryAccessPattern.LINEAR_1D);
		DFELink lmem2cpu_u = addStreamFromOnCardMemory("lmemuold_out",
				                      MemoryControlGroup.MemoryAccessPattern.LINEAR_1D);
		DFELink cpu2lmem_v = addStreamToOnCardMemory("lmemvold_in",
                                      MemoryControlGroup.MemoryAccessPattern.LINEAR_1D);
        DFELink lmem2cpu_v = addStreamFromOnCardMemory("lmemvold_out",
                                      MemoryControlGroup.MemoryAccessPattern.LINEAR_1D);
		DFELink cpu2lmem_p = addStreamToOnCardMemory("lmempold_in",
                                      MemoryControlGroup.MemoryAccessPattern.LINEAR_1D);
        DFELink lmem2cpu_p = addStreamFromOnCardMemory("lmempold_out",
                                      MemoryControlGroup.MemoryAccessPattern.LINEAR_1D);

		// Incoming u stream goes to LMEM
        DFELink atest = addStreamFromCPU("cpu2lmem_uold");
        cpu2lmem_u <== atest;
        // Incoming v stream goes to LMEM
        DFELink vlink = addStreamFromCPU("cpu2lmem_vold");
        cpu2lmem_v <== vlink;
        // Incoming p stream goes to LMEM
        DFELink plink = addStreamFromCPU("cpu2lmem_pold");
        cpu2lmem_p <== plink;

        // Stream from LMEM into timesmooth kernel
        DFELink pold_lmem = addStreamFromOnCardMemory("pold_from_lmem",MemoryControlGroup.MemoryAccessPattern.LINEAR_1D);
        DFELink vold_lmem = addStreamFromOnCardMemory("vold_from_lmem",MemoryControlGroup.MemoryAccessPattern.LINEAR_1D);
        DFELink uold_lmem = addStreamFromOnCardMemory("uold_from_lmem",MemoryControlGroup.MemoryAccessPattern.LINEAR_1D);

		// We need a 'Fanout' Routing Block to duplicate the input stream 'p' from the CPU to
		// the various kernels that need it.
        DFELink p = addStreamFromCPU("p");
		Fanout fanout = fanout(s_pressureFanout);
		fanout.getInput() <== p;
        DFELink p1 = fanout.addOutput("p1");
        DFELink p2 = fanout.addOutput("p2");
        DFELink p3 = fanout.addOutput("p3");
        DFELink p4 = fanout.addOutput("p4");
        DFELink p5 = fanout.addOutput("p5");

		compute_CU.getInput("p") <== p1;
		compute_CV.getInput("p") <== p2;
        compute_Z.getInput("p") <== p3;
        compute_H.getInput("p") <== p4;
        timeSmoothP.getInput("field") <== p5;

        // We also need a Fanout routing block for the input stream 'u'
        DFELink u = addStreamFromCPU("u");
		Fanout ufanout = fanout(s_uFanout);
		ufanout.getInput() <== u;
		DFELink u1 = ufanout.addOutput("u1");
		DFELink u2 = ufanout.addOutput("u2");
		DFELink u3 = ufanout.addOutput("u3");
        DFELink u4 = ufanout.addOutput("u4");

		compute_CU.getInput("u") <== u1;
        compute_Z.getInput("u") <== u2;
        compute_H.getInput("u") <== u3;
        timeSmoothU.getInput("field") <== u4;

        // And for the input stream 'v'
		DFELink v = addStreamFromCPU("v");
		Fanout vfanout = fanout(s_vFanout);
		vfanout.getInput() <== v;
		DFELink v1 = vfanout.addOutput("v1");
		DFELink v2 = vfanout.addOutput("v2");
		DFELink v3 = vfanout.addOutput("v3");
        DFELink v4 = vfanout.addOutput("v4");

		compute_CV.getInput("v") <== v1;
        compute_Z.getInput("v") <== v2;
        compute_H.getInput("v") <== v3;
        timeSmoothV.getInput("field") <== v4;

        // Input stream uold - required by both computeUNew and timeSmoothU
        DFELink uold = addStreamFromCPU("uold");
        Fanout uoldFanout = fanout(s_uoldFanout);
        uoldFanout.getInput() <== uold;
        DFELink uold_lnk1 = uoldFanout.addOutput("uold1");

        compute_Unew.getInput("uold") <== uold_lnk1;
        timeSmoothU.getInput("field_old") <== uold_lmem;

        // Input stream vold
        DFELink vold = addStreamFromCPU("vold");
        Fanout voldFanout = fanout(s_voldFanout);
        voldFanout.getInput() <== vold;
        DFELink vold_lnk1 = voldFanout.addOutput("vold1");
        //DFELink vold_lnk2 = voldFanout.addOutput("vold2");

        compute_Vnew.getInput("vold") <== vold_lnk1;
        timeSmoothV.getInput("field_old") <== vold_lmem;

        // Input stream pold
        DFELink pold = addStreamFromCPU("pold");
        Fanout poldFanout = fanout(s_poldFanout);
        poldFanout.getInput() <== pold;
        DFELink pold_lnk1 = poldFanout.addOutput("pold1");

        compute_Pnew.getInput("pold") <== pold_lnk1;
        timeSmoothP.getInput("field_old") <== pold_lmem;

        // Apply PBCs to cu
        //pbcs_u.getInput("ufld") <== compute_CU.getOutput("cu");

        Fanout cufanout = fanout(s_cuFanout);
		//cufanout.getInput() <== pbcs_u.getOutput("ufldout");
		cufanout.getInput() <== compute_CU.getOutput("cu");
		DFELink cu1 = cufanout.addOutput("cuout1");
		DFELink cu2 = cufanout.addOutput("cuout2");

		compute_Vnew.getInput("cu") <== cu1;
		compute_Pnew.getInput("cu") <== cu2;

        // Apply PBCs to cv
        //pbcs_v.getInput("vfld") <== compute_CV.getOutput("cv");
        //pbcs_v.getInput("ufld") <== compute_CV.getOutput("cv");

        // A routing block in order to connect the output from
		// one kernel to the input of another
		Fanout cvfanout = fanout(s_cvFanout);
		//cvfanout.getInput() <== pbcs_v.getOutput("ufldout");
		//cvfanout.getInput() <== pbcs_v.getOutput("vfldout");
		cvfanout.getInput() <== compute_CV.getOutput("cv");
		DFELink cv1 = cvfanout.addOutput("cvout1");
		DFELink cv2 = cvfanout.addOutput("cvout2");

		compute_Unew.getInput("cv") <== cv1;
		compute_Pnew.getInput("cv") <== cv2;


		// Apply PBCs to z
		//pbcs_f.getInput("ffld") <== compute_Z.getOutput("z");

		// Connect output of PBCs for z to input of compute_{u,v}new
		Fanout zfanout = fanout(s_zFanout);
		//zfanout.getInput() <== pbcs_f.getOutput("ffldout");
		zfanout.getInput() <== compute_Z.getOutput("z");
		DFELink z1 = zfanout.addOutput("zout1");
		DFELink z2 = zfanout.addOutput("zout2");

		compute_Unew.getInput("z") <== z1;
        compute_Vnew.getInput("z") <== z2;

        // Apply PBCs to h
        //pbcs_t.getInput("tfld") <== compute_H.getOutput("h");

		// Connect output of compute_h to input of compute_unew
		Fanout hfanout = fanout(s_hFanout);
		//hfanout.getInput() <== pbcs_t.getOutput("tfldout");
		hfanout.getInput() <== compute_H.getOutput("h");
		DFELink h1 = hfanout.addOutput("hout1");
		DFELink h2 = hfanout.addOutput("hout2");

		compute_Unew.getInput("h") <== h1;
		compute_Vnew.getInput("h") <== h2;

		// Routing blocks to connect outputs of compute{UVP}_new to inputs of
		// time-smooth kernels
		Fanout unewFanout = fanout(s_unewFanout);
		unewFanout.getInput() <== compute_Unew.getOutput("unew");
		DFELink unew_lnk = unewFanout.addOutput("unewout");
		Fanout vnewFanout = fanout(s_vnewFanout);
		vnewFanout.getInput() <== compute_Vnew.getOutput("vnew");
		DFELink vnew_lnk = vnewFanout.addOutput("vnewout");
		Fanout pnewFanout = fanout(s_pnewFanout);
		pnewFanout.getInput() <== compute_Pnew.getOutput("pnew");
		DFELink pnew_lnk = pnewFanout.addOutput("pnewout");

		// Time smooth kernel takes field{old,now,new} and updates field_old
		timeSmoothU.getInput("field_new") <== unew_lnk;
        timeSmoothV.getInput("field_new") <== vnew_lnk;
        timeSmoothP.getInput("field_new") <== pnew_lnk;

		// 'New' field is then made the 'current' field

		// Hook-up output streams
        DFELink uout = addStreamToCPU("uout");
        DFELink uoldOut = addStreamToCPU("uold_out");
        uout <== timeSmoothU.getOutput("curr_out");
        uoldOut <== timeSmoothU.getOutput("old_out");

        DFELink vout = addStreamToCPU("vout");
        DFELink voldOut = addStreamToCPU("vold_out");
        vout <== timeSmoothV.getOutput("curr_out");
        voldOut <== timeSmoothV.getOutput("old_out");

        DFELink pout = addStreamToCPU("pout");
        DFELink poldOut = addStreamToCPU("pold_out");
        pout <== timeSmoothP.getOutput("curr_out");
        poldOut <== timeSmoothP.getOutput("old_out");

        // uold is streamed back to the CPU from LMEM
        DFELink ulinkout = addStreamToCPU("lmem2cpu_uold");
        ulinkout <== lmem2cpu_u;
        // v is streamed back to CPU from LMEM
        DFELink vlinkout = addStreamToCPU("lmem2cpu_vold");
        vlinkout <== lmem2cpu_v;
        // p is streamed back to CPU from LMEM
        DFELink plinkout = addStreamToCPU("lmem2cpu_pold");
        plinkout <== lmem2cpu_p;

		//configBuild(engineParameters);
	}

	private static EngineInterface interfaceRead(String name) {
		EngineInterface ei = new EngineInterface(name);
		CPUTypes   dptype = CPUTypes.DOUBLE;
		CPUTypes   itype = CPUTypes.INT32;

		InterfaceParam size = ei.addParam("size", itype);
		InterfaceParam start = ei.addParam("start", itype);
		InterfaceParam sizeInBytes = size*dptype.sizeInBytes();

		ei.setLMemLinear("lmemuold_out", start*dptype.sizeInBytes(), sizeInBytes);
		ei.setLMemLinear("lmemvold_out", start*dptype.sizeInBytes() + sizeInBytes, sizeInBytes);
		ei.setLMemLinear("lmempold_out", start*dptype.sizeInBytes() + 2*sizeInBytes, sizeInBytes);
		ei.setStream("lmem2cpu_uold", dptype, sizeInBytes);
		ei.setStream("lmem2cpu_vold", dptype, sizeInBytes);
		ei.setStream("lmem2cpu_pold", dptype, sizeInBytes);

		ei.ignoreAll(EngineInterface.Direction.IN_OUT);

		return ei;
	}

	private static EngineInterface interfaceWrite(String name) {
		EngineInterface ei = new EngineInterface(name);
		CPUTypes   dptype = CPUTypes.DOUBLE;
		CPUTypes   itype = CPUTypes.INT32;

		InterfaceParam size = ei.addParam("size", itype);
		InterfaceParam start = ei.addParam("start", itype);
		InterfaceParam sizeBytes = size*dptype.sizeInBytes();

		ei.setStream("cpu2lmem_uold", dptype, sizeBytes);
		ei.setStream("cpu2lmem_vold", dptype, sizeBytes);
		ei.setStream("cpu2lmem_pold", dptype, sizeBytes);
		ei.setLMemLinear("lmemuold_in", start*dptype.sizeInBytes(), sizeBytes);
		ei.setLMemLinear("lmemvold_in", start*dptype.sizeInBytes() + sizeBytes, sizeBytes);
		ei.setLMemLinear("lmempold_in", start*dptype.sizeInBytes() + 2*sizeBytes, sizeBytes);

		ei.ignoreAll(EngineInterface.Direction.IN_OUT);

		return ei;
	}

	private static EngineInterface interfaceDefault() {
		EngineInterface engine_interface = new EngineInterface();
		CPUTypes   type = CPUTypes.DOUBLE;
		int        size = type.sizeInBytes();

		InterfaceParam  N    = engine_interface.addParam("N", CPUTypes.INT);
		// LMEM size might be padded in order to ensure alignment
		InterfaceParam  NLmem = engine_interface.addParam("NLmem", CPUTypes.INT);

        InterfaceParam sizeInBytes = NLmem * type.sizeInBytes();

		engine_interface.setTicks(s_kernelName1, N);
		engine_interface.setTicks(s_kernelName2, N);
		engine_interface.setTicks(s_kernelName3, N);
		engine_interface.setTicks(s_kernelName4, N);
		engine_interface.setTicks(s_kernelName5, N);
		engine_interface.setTicks(s_kernelName6, N);
		engine_interface.setTicks(s_kernelName7, N);
		engine_interface.setTicks(s_kernelName8, N);
		engine_interface.setTicks(s_kernelName9, N);
		engine_interface.setTicks(s_kernelName10, N);
		//engine_interface.setTicks(s_kernelName11, N);
		//engine_interface.setTicks(s_kernelName12, N);
		//engine_interface.setTicks(s_kernelName13, N);
		//engine_interface.setTicks(s_kernelName14, N);

		// These are the input streams
		engine_interface.setStream("p",    type, sizeInBytes);
		engine_interface.setStream("u",    type, sizeInBytes);
		engine_interface.setStream("uold", type, sizeInBytes);
		engine_interface.setStream("v",    type, sizeInBytes);
		engine_interface.setStream("vold", type, sizeInBytes);
		engine_interface.setStream("pold", type, sizeInBytes);

		// These are the output streams
		engine_interface.setStream("uout", type, sizeInBytes);
		engine_interface.setStream("vout", type, sizeInBytes);
		engine_interface.setStream("pout", type, sizeInBytes);
		engine_interface.setStream("uold_out", type, sizeInBytes);
		engine_interface.setStream("vold_out", type, sizeInBytes);
		engine_interface.setStream("pold_out", type, sizeInBytes);

		engine_interface.route("PressureFan -> p1, PressureFan -> p2, "+
			"PressureFan -> p3, PressureFan -> p4, PressureFan -> p5, "+
			"uFan -> u1, uFan -> u2, uFan -> u3, uFan -> u4, "+
			"vFan -> v1, vFan -> v2, vFan -> v3, vFan -> v4, "+
			"cvFan -> cvout1, cvFan -> cvout2, "+
			"cuFan -> cuout1, cuFan -> cuout2, "+
			"zFan -> zout1, zFan -> zout2, "+
			"hFan -> hout1, hFan -> hout2, "+
			"pnewFan -> pnewout, unewFan -> unewout, vnewFan -> vnewout, "+
			"uoldFan -> uold1, uoldFan -> uold2, "+
	        "voldFan -> vold1, voldFan -> vold2, "+
	        "poldFan -> pold1 ");

		// Streams from/to LMEM
		InterfaceParam zero = engine_interface.addConstant(0);
		engine_interface.setLMemLinear("uold_lmem", zero, NLmem*size);
		engine_interface.setLMemLinear("vold_lmem", NLmem*size, NLmem*size);
		engine_interface.setLMemLinear("pold_lmem", 2*NLmem*size, NLmem*size);
		engine_interface.setStream("uold_from_lmem", type, NLmem*size);
		engine_interface.setStream("vold_from_lmem", type, NLmem*size);
		engine_interface.setStream("pold_from_lmem", type, NLmem*size);
		// Stream from TimeSmooth kernel to LMEM
		//engine_interface.setLMemLinear("testout", sizeInBytes, sizeInBytes);

		engine_interface.ignoreAll(EngineInterface.Direction.IN_OUT);

		return engine_interface;
	}

	private void configBuild(GOceanEngineParameters params) {
		BuildConfig buildConfig = getBuildConfig();
		buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		buildConfig.setMPPRParallelism(params.getMPPRThreads());
		buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());
	}

	public static void main(String[] args) {
		GOceanEngineParameters params = new GOceanEngineParameters(args);
		GOceanManager manager = new GOceanManager(params);

		// Turn on stream status blocks
		//DebugLevel MyDebugLevel = new DebugLevel();
		//MyDebugLevel.setHasStreamStatus(true);
		//manager.debug.setDebugLevel(MyDebugLevel);

		manager.createSLiCinterface(interfaceDefault());
		manager.createSLiCinterface(interfaceRead("readLMem"));
		manager.createSLiCinterface(interfaceWrite("writeLMem"));

		// Create the manager
		manager.build();
	}
}
