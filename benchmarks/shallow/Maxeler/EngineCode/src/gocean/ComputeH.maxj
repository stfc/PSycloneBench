package gocean;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

class ComputeH extends Kernel {

	private static final DFEType type = dfeFloat(11,53);

	protected ComputeH(KernelParameters parameters) {
		super(parameters);

		DFEVar p = io.input("p", type);
		DFEVar u = io.input("u", type);
		DFEVar v = io.input("v", type);
		int width = 256;

		CounterChain chain = control.count.makeCounterChain();
		DFEVar j = chain.addCounter(width*width, 1);

//	    H(I,J) = P(I,J)+.25d0*(U(I,J)*U(I,J)+U(I-1,J)*U(I-1,J) + &
//                V(I,J)*V(I,J)+V(I,J-1)*V(I,J-1))
        DFEVar h = j > width ? p + 0.25*(u*u + stream.offset(u,-1)*stream.offset(u,-1) +
                           v*v + stream.offset(v,-width)*stream.offset(v, -width)) : 0.0;

		//DFEVar h = u*u + v*v + p;

		io.output("h", h, type);
	}

}