package gocean;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

class ComputePnew extends Kernel {

	private static final DFEType type = dfeFloat(11,53);

	protected ComputePnew(KernelParameters parameters) {
		super(parameters);

		int width = 256;
		// \todo Set these quantities from the CPU
		double tdtsdy = 0.5;
        double tdtsdx = 0.5;

		DFEVar pold = io.input("pold", type);
		DFEVar cu = io.input("cu", type);
		DFEVar cv = io.input("cv", type);

		CounterChain chain = control.count.makeCounterChain();
		DFEVar j = chain.addCounter(width*width, 1);

//	    tdtsdx = tdt/dx
//	    tdtsdy = tdt/dy

//	    PNEW(I,J) = POLD(I,J)-TDTSDX*(CU(I,J)-CU(I-1,J))   &
//	                         -TDTSDY*(CV(I,J)-CV(I,J-1))

		DFEVar aboveLowerBound = j > width;
		//DFEVar belowUpperBound = j < width*(width-1);
		DFEVar inBounds = aboveLowerBound; // & belowUpperBound;

        DFEVar pnew =  inBounds ? pold - tdtsdx*(cu + stream.offset(cu,-1))
        		- tdtsdy*(cv - stream.offset(cv, -width)) : 0.0;

		io.output("pnew", pnew, type);
	}

}