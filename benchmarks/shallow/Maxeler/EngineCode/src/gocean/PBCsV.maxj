package gocean;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

class PBCsV extends Kernel {

	// 64-bit floating point
	private static final DFEType type = dfeFloat(11,53);

	protected PBCsV(KernelParameters parameters) {
		super(parameters);

		int width = 256;
		DFEVar vfld = io.input("vfld", type);

		// Make a counter chain to count in same way as
		// for(j=0; j<width; j++){
		//   for(i=0; i<width; i++){
		CounterChain chain = control.count.makeCounterChain();
		DFEVar j = chain.addCounter(width, 1);
		DFEVar i = chain.addCounter(width, 1);

		// First row = last row
	    // field(1:M,1    ) = field(1:M,NP1)
	    // Last col = first col
	    // field(MP1,1:NP1) = field(1,  1:NP1)

        // First row = last row
        // \TODO Correct these offsets to get correct values
        // \TODO More efficient to copy the first 'row' of the array
        // into FMEM and then read from that here?
        DFEVar vfldtmp = j > 0 ? vfld : stream.offset(vfld, (width-1)*width);

        // Last col = first col
        DFEVar vfldout = i < (width-2) ? vfldtmp : stream.offset(vfldtmp,-width);

		io.output("vfldout", vfldout, type);
	}

}
