package gocean;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

class TimeSmooth extends Kernel {

	private static final DFEType type = dfeFloat(11,53);

	protected TimeSmooth(KernelParameters parameters) {
		super(parameters);

		DFEVar fld     = io.input("field", type);
		DFEVar fld_old = io.input("field_old", type);
		DFEVar fld_new = io.input("field_new", type);

		// \TODO Make this parameter configurable from the CPU
		double alpha = 0.001;

		// Update the 'old' field
//	    field_old(i,j) = field(i,j) + &
//        alpha*(field_new(i,j) - 2.0d0*field(i,j) + field_old(i,j))
        DFEVar fld_out = fld + alpha*(fld_new -2.0*fld + fld_old);

		io.output("old_out", fld_out, type);
		// The 'new' field becomes the current field
		io.output("curr_out", fld_new, type);
	}

}