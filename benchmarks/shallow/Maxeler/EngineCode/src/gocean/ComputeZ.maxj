package gocean;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

class ComputeZ extends Kernel {

	private static final DFEType type = dfeFloat(11,53);

	protected ComputeZ(KernelParameters parameters) {
		super(parameters);

		DFEVar p = io.input("p", type);
		DFEVar u = io.input("u", type);
		DFEVar v = io.input("v", type);
		int width = 256;
        // \TODO Set these from the CPU
		double dx = 10000.0;
        double dy = dx;

		CounterChain chain = control.count.makeCounterChain();
		DFEVar j = chain.addCounter(width*width, 1);

//	    Z(I,J) =( (4.0d0/dx)*( V(I,J-1)-V(I-1,J-1))-    &
//	              (4.0d0/dy)*( U(I-1,J)-U(I-1,J-1)) ) / &
//	            (P(I-1,J-1)+P(I,J-1)+ P(I,J)+P(I-1,J))
        DFEVar z = j > (width+1) ? ( (4.0/dx)*( stream.offset(v, -width) - stream.offset(v, -width-1)) -
                    (4.0/dy)*( stream.offset(u, -1) - stream.offset(u, -width-1)) ) /
                  (stream.offset(p, -width-1) + stream.offset(p, -width) + p + stream.offset(p, -1)) : 0.0;

//        DFEVar z = p + u + v;
        //debug.simPrintf("z = %e\n", z);

		io.output("z", z, type);
	}

}